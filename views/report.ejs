<%- include('layout/header') %>

<div class="container1">
    <div class="row">
        <div class="col-md-2 sidebar bg-light">
            <ul class="list-group">
                <li class="list-group-item">
                    <div class="d-flex flex-column">
                        <div class="form-check">
                            <input type="radio" name="timeFrame" value="week" id="week" class="form-check-input" checked>
                            <label for="week" class="form-check-label">Tuần</label>
                            <select id="weekDropdown" class="form-select mt-2">
                                <% for (let i = 1; i <= 52; i++) { %>
                                    <option value="week<%= i %>">Tuần <%= i %></option>
                                <% } %>
                            </select>
                        </div>
                        <div class="form-check mt-3">
                            <input type="radio" name="timeFrame" value="month" id="month" class="form-check-input">
                            <label for="month" class="form-check-label">Tháng</label>
                            <select id="monthDropdown" class="form-select mt-2" disabled>
                                <% for (let i = 1; i <= 12; i++) { %>
                                    <option value="month<%= i %>">Tháng <%= i %></option>
                                <% } %>
                            </select>
                        </div>
                        <div class="form-check mt-3">
                            <input type="radio" name="timeFrame" value="year" id="year" class="form-check-input">
                            <label for="year" class="form-check-label">Năm</label>
                            <select id="yearDropdown" class="form-select mt-2" disabled>
                                <% for (let i = 1808; i <= 2024; i++) { %>
                                    <option value="year<%= i %>"><%= i %></option>
                                <% } %>
                            </select>
                        </div>
                    </div>
                </li>
                <li class="list-group-item">
                    <div class="d-flex justify-content-between">
                        <div class="form-check">
                            <input type="radio" name="completionStatus" value="true" id="completed" class="form-check-input">
                            <label for="completed" class="form-check-label">Đã hoàn thành</label>
                        </div>
                        <div class="form-check">
                            <input type="radio" name="completionStatus" value="false" id="incomplete" class="form-check-input">
                            <label for="incomplete" class="form-check-label">Chưa hoàn thành</label>
                        </div>
                        <div class="form-check">
                            <input type="radio" name="completionStatus" value="all" id="all" class="form-check-input" checked>
                            <label for="all" class="form-check-label">Tất cả</label>
                        </div>
                    </div>
                </li>
                <li class="list-group-item">
                    <div>
                        <p>Chọn loại biểu đồ:</p>
                        <div class="form-check">
                            <input type="radio" name="chartType" value="lineChart" id="lineChart" class="form-check-input">
                            <label for="lineChart" class="form-check-label">Biểu Đồ Đường</label>
                        </div>
                        <div class="form-check">
                            <input type="radio" name="chartType" value="barChart" id="barChart" class="form-check-input">
                            <label for="barChart" class="form-check-label">Biểu Đồ Cột</label>
                        </div>
                        <div class="form-check">
                            <input type="radio" name="chartType" value="pieChart" id="pieChart" class="form-check-input">
                            <label for="pieChart" class="form-check-label">Biểu Đồ Tròn</label>
                        </div>
                        <div class="form-check">
                            <input type="radio" name="chartType" value="table" id="table" class="form-check-input" checked>
                            <label for="table" class="form-check-label">Dạng bảng</label>
                        </div>
                    </div>
                </li>
                <li class="list-group-item">
                    <button type="button" id="displayButton" class="btn btn-primary">Hiển Thị</button>
                </li>
            </ul>
        </div>
        <div class="col-md-10 content">
            <div id="chartContainer" style="display: none;">
                <canvas id="myChart" data-events="<%= encodeURIComponent(JSON.stringify(events)) %>"></canvas>
            </div>
            <div id="eventTableContainer" style="display: block;">
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">Tiêu đề</th>
                            <th scope="col">Bắt đầu</th>
                            <th scope="col">Kết thúc</th>
                            <th scope="col">Hoàn thành</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% events.forEach(event => { %>
                            <tr>
                                <td><%= event.title %></td>
                                <td><%= event.start %></td>
                                <td><%= event.end %></td>
                                <td><%= event.status ? 'Đã hoàn thành' : 'Chưa hoàn thành' %></td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const weekDropdown = document.getElementById('weekDropdown');
        const monthDropdown = document.getElementById('monthDropdown');
        const yearDropdown = document.getElementById('yearDropdown');
        
        document.querySelectorAll('input[name="timeFrame"]').forEach(radio => {
            radio.addEventListener('change', function() {
                if (this.value === 'week') {
                    weekDropdown.disabled = false;
                    monthDropdown.disabled = true;
                    yearDropdown.disabled = true;
                } else if (this.value === 'month') {
                    weekDropdown.disabled = true;
                    monthDropdown.disabled = false;
                    yearDropdown.disabled = true;
                } else if (this.value === 'year') {
                    weekDropdown.disabled = true;
                    monthDropdown.disabled = true;
                    yearDropdown.disabled = false;
                }
            });
        });

        document.getElementById('displayButton').addEventListener('click', function() {
            const chartType = document.querySelector('input[name="chartType"]:checked').value;
            const completionStatus = document.querySelector('input[name="completionStatus"]:checked').value;
            const timeFrame = document.querySelector('input[name="timeFrame"]:checked').value;
            const chartContainer = document.getElementById('chartContainer');
            const eventTableContainer = document.getElementById('eventTableContainer');
            const chartElement = document.getElementById('myChart');
            const events = JSON.parse(decodeURIComponent(chartElement.dataset.events));

            // Get selected value from dropdown based on time frame
            let selectedValue;
            if (timeFrame === 'week') {
                selectedValue = weekDropdown.value;
            } else if (timeFrame === 'month') {
                selectedValue = monthDropdown.value;
            } else if (timeFrame === 'year') {
                selectedValue = yearDropdown.value;
            }

            // Filter events based on completion status
            let filteredEvents;
            if (completionStatus === 'true') {
                filteredEvents = events.filter(event => event.status);
            } else if (completionStatus === 'false') {
                filteredEvents = events.filter(event => !event.status);
            } else {
                filteredEvents = events;
            }

            // Further filter events based on the selected time frame value
            if (timeFrame === 'week') {
                // Filter events for the selected week
                filteredEvents = filteredEvents.filter(event => {
                    const eventWeek = getWeekNumber(new Date(event.start));
                    return eventWeek === parseInt(selectedValue.replace('week', ''));
                });
            } else if (timeFrame === 'month') {
                // Filter events for the selected month
                filteredEvents = filteredEvents.filter(event => {
                    const eventMonth = new Date(event.start).getMonth() + 1;
                    return eventMonth === parseInt(selectedValue.replace('month', ''));
                });
            } else if (timeFrame === 'year') {
                // Filter events for the selected year
                filteredEvents = filteredEvents.filter(event => {
                    const eventYear = new Date(event.start).getFullYear();
                    return eventYear === parseInt(selectedValue.replace('year', ''));
                });
            }

            // Reset display
            chartContainer.style.display = 'none';
            eventTableContainer.style.display = 'none';

            if (chartType === 'table') {
                // Update table with filtered events
                const tbody = eventTableContainer.querySelector('tbody');
                tbody.innerHTML = '';
                filteredEvents.forEach(event => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${event.title}</td>
                        <td>${event.start}</td>
                        <td>${event.end}</td>
                        <td>${event.status ? 'Đã hoàn thành' : 'Chưa hoàn thành'}</td>
                    `;
                    tbody.appendChild(row);
                });
                eventTableContainer.style.display = 'block';
            } else {
                chartContainer.style.display = 'block';

                // Calculate the number of completed and incomplete events
                const completedCount = filteredEvents.filter(event => event.status).length;
                const incompleteCount = filteredEvents.length - completedCount;

                // Destroy previous chart instance if exists
                if (window.myChartInstance) {
                    window.myChartInstance.destroy();
                }

                // Determine the chart type
                let chartJsType;
                switch (chartType) {
                    case 'lineChart':
                        chartJsType = 'line';
                        break;
                    case 'barChart':
                        chartJsType = 'bar';
                        break;
                    case 'pieChart':
                        chartJsType = 'pie';
                        break;
                    default:
                        chartJsType = 'bar'; // Default to bar chart
                }

                // Create the chart using Chart.js
                window.myChartInstance = new Chart(chartElement, {
                    type: chartJsType, // Specify the chart type
                    data: {
                        labels: ['Đã hoàn thành', 'Chưa hoàn thành'], // Labels for the x-axis
                        datasets: [{
                            label: 'Số lượng sự kiện', // Label for the dataset
                            data: [completedCount, incompleteCount], // Data points for the chart
                            backgroundColor: chartType === 'pieChart' ? ['#4caf50', '#f44336'] : ['#4caf50', '#f44336'],
                            borderColor: chartType !== 'pieChart' ? ['#4caf50', '#f44336'] : undefined,
                            borderWidth: 1 // Border width of the bars
                        }]
                    },
                    options: {
                        scales: chartType !== 'pieChart' ? {
                            y: {
                                beginAtZero: true // Ensure the y-axis starts at zero
                            }
                        } : {}
                    }
                });
            }
        });

        // Function to get the week number of a date
        function getWeekNumber(d) {
            d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));
            d.setUTCDate(d.getUTCDate() + 4 - (d.getUTCDay() || 7));
            const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
            const weekNo = Math.ceil((((d - yearStart) / 86400000) + 1) / 7);
            return weekNo;
        }

        // Ensure the table is displayed by default on page load
        document.getElementById('eventTableContainer').style.display = 'block';
    });
</script>
<%- include('layout/footer') %>